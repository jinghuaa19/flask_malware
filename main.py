import pickle
import shutil, os, csv
import xml.etree.ElementTree as ET
import re
import pandas as pd


def row_title():
    row_titles = []
    with open('./permission_data/permissions.txt', 'r') as file:
        line = file.readline()
        while line:
            line = line.strip('\n')
            row_titles.append(line)
            line = file.readline()
    return row_titles


def dangerous_perm():
    dangerous_permissions = []
    with open('./permission_data/dangerous_permission.txt', 'r') as file:
        line = file.readline()
        while line:
            line = line.strip('\n')
            dangerous_permissions.append(line)
            line = file.readline()
    return dangerous_permissions


def dangerous_perm_explain():
    one_to_one = {}
    with open('./permission_data/dangerous_perm_exp.txt', 'r', encoding='utf-8') as file:
        line = file.readline()
        while line:
            line = line.strip('\n')
            one_to_one[line.split(',')[0]] = line.split(',')[1]
            line = file.readline()
    return one_to_one


def apk_xml(files):
    os.system("d:/apktool/apktool -q d -f " + files + " -o " + "temp/")
    print("..............反编译APK完成！")
    return 0


def xml_csv(files):
    row_titles = row_title()
    with open('./temp/temp.csv', 'a+', newline='') as csvfile:
        csv_write = csv.writer(csvfile)
        csv_write.writerow(row_titles)
    try:
        tree = ET.parse(files)
        root = tree.getroot()
        datas = []
        for item in root.iterfind('uses-permission'):  # 获取数据
            data_item = item.get("{http://schemas.android.com/apk/res/android}name").split(".")[-1]
            if data_item in datas:
                continue
            else:
                datas.append(data_item)
        row_write = []
        for data1 in row_titles:
            if data1 in datas:
                row_write.append(1)
            else:
                row_write.append(0)
        with open('./temp/temp.csv', 'a+', newline='') as csvfile:
            csv_write = csv.writer(csvfile)
            csv_write.writerow(row_write)
    except Exception as e:
        print("XML解析出错!")
        shutil.rmtree('./temp/', ignore_errors=True)
        os.mkdir('temp')


def pridict_result(files):
    count = 0
    datas = pd.read_csv(files)
    df = pd.DataFrame(datas)
    xx = df.iloc[:, :]
    with open('./model/model_svc.pickle', 'rb') as f:
        model_svc = pickle.load(f)
        if model_svc.predict(xx) == 1:
            count += 1
    with open('./model/model_svc.pickle', 'rb') as f:
        model_svc = pickle.load(f)
        if model_svc.predict(xx) == 1:
            count += 1
    with open('./model/model_svc.pickle', 'rb') as f:
        model_svc = pickle.load(f)
        if model_svc.predict(xx) == 1:
            count += 1
    with open('./model/model_svc.pickle', 'rb') as f:
        model_svc = pickle.load(f)
        if model_svc.predict(xx) == 1:
            count += 1
    with open('./model/model_svc.pickle', 'rb') as f:
        model_svc = pickle.load(f)
        if model_svc.predict(xx) == 1:
            count += 1
    return count


def outputs1(files, count):
    datas = pd.read_csv(files)
    df = pd.DataFrame(datas)
    one_to_one = {}
    temp = []
    dangerous_perms = dangerous_perm()
    with open('./permission_data/dangerous_perm_exp.txt', 'r', encoding='utf-8') as file:
        line = file.readline()
        while line:
            line = line.strip('\n')
            one_to_one[line.split(',')[0]] = line.split(',')[1]
            line = file.readline()
    if count >= 0:
        for x in dangerous_perms:
            if df[x].sum() == 1:
                temp.append("包含危险权限" + x + "。" + one_to_one.get(x))
    return temp


def outputs(count):
    temp = []
    if count >= 1:
        temp.append("该软件可能是恶意软件，请注意信息安全！")
    else:
        temp.append("该软件不是恶意软件")
    temp.append("可能性等级：" + str(count) + "(最高为5)")
    return temp


def cleaning(file_path):
    shutil.move(file_path,'./uploads')
    shutil.rmtree('./temp/', ignore_errors=True)


if __name__ == "__main__":
    apk_xml('./uploads/8632.apk')
    xml_csv('./temp/AndroidManifest.xml')
    temps = []
    result = pridict_result('./temp/temp.csv')
    temps = temps + outputs(result)
    temps = temps + outputs1('./temp/temp.csv', result)
    for temp in temps:
        print(temp)
    cleaning()
