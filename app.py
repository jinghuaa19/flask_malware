import os, shutil,csv,uuid
from main import pridict_result, outputs, outputs1, apk_xml, xml_csv, cleaning
from flask import Flask, render_template, flash, redirect, url_for, request, send_from_directory
from flask_dropzone import Dropzone

app = Flask(__name__)

# Custom config
app.config['UPLOAD_PATH'] = os.path.join(app.root_path, 'uploads')
app.config['ALLOWED_EXTENSIONS'] = ['apk']

# Flask-Dropzone config
app.config['DROPZONE_MAX_FILE_SIZE'] = 300
app.config['DROPZONE_MAX_FILES'] = 1

dropzone = Dropzone(app)


@app.route('/', methods=['GET', 'POST'])
def index():
    return render_template('index.html')


def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']


def random_filename(filename):
    ext = os.path.splitext(filename)[1]
    new_filename = uuid.uuid4().hex + ext
    return new_filename


@app.route('/dtree_picture', methods=['GET'])
def dtree_picture():
    return render_template('Dtree_picture.html')


@app.route('/dropzone-upload', methods=['GET', 'POST'])
def dropzone_upload():
    if request.method == 'POST':
        # check if the post request has the file part
        if 'file' not in request.files:
            return 'This field is required.', 400
        f = request.files.get('file')
        if f and allowed_file(f.filename):
            ip = request.remote_addr
            filepath = os.path.join(app.config['UPLOAD_PATH'], ip)
            if os.path.exists(filepath):
                shutil.rmtree(filepath, ignore_errors=True)
            os.mkdir(filepath)
            filename = random_filename(f.filename)
            f.save(os.path.join(filepath, filename))
        else:
            return 'Invalid file type.', 400
    return render_template('dropzone.html')


@app.route('/report', methods=['GET', 'POST'])
def report():
    ip = request.remote_addr
    filepath = os.path.join(app.config['UPLOAD_PATH'], ip)
    for file in os.listdir(filepath):
        if os.path.exists(filepath):
            shutil.rmtree('temp', ignore_errors=True)
        os.mkdir('temp')
        apk_xml(os.path.join(filepath, file))
        xml_csv('./temp/AndroidManifest.xml')
    return render_template('report.html')


@app.route('/analyse', methods=['GET','POST'])
def analyse():
    if request.method == 'POST':
        finalist = []
        report_file=[]
        type_apk = request.form.get('type_apk')
        find_apk= request.form.get('find_apk')
        root_apk= request.form.get('root_apk')
        wrong_apk= request.form.get('wrong_apk')
        ip = request.remote_addr
        filepath = os.path.join(app.config['UPLOAD_PATH'], ip)
        for file in os.listdir(filepath):
            report_file.append(file)
            report_file.append(type_apk)
            report_file.append(find_apk)
            report_file.append(root_apk)
            report_file.append(wrong_apk)
            result = pridict_result('./temp/temp.csv')
            finalist = finalist + outputs(result)
            finalist = finalist + outputs1('./temp/temp.csv', result)
            finalist.append("结果仅供参考")
            cleaning(os.path.join(filepath, file))
            with open('data_collect.csv', 'a+', newline='') as csvfile:
                csv_write = csv.writer(csvfile)
                csv_write.writerow(report_file)
        shutil.rmtree(filepath, ignore_errors=True)
        print(report_file)
        return render_template('dropzone.html', filelist=finalist)
    return render_template('dropzone.html')
